
<style>
  * {
    color: #ddd;
    font-family: Arial, Helvetica, sans-serif;
  }
  body, html{
    padding: 25px;
  }
  body, html, input{
    background-color: #111;
  }
  main {
    text-align: center;
  }
  .boxed {
    border: 2px solid lightgrey;
    display: inline-block;
    margin: 2px;
    padding: 5px;
  }
  .v-btn {
    padding: 5px 15px;
    margin: 1px;
    text-decoration: none;
    background-color: #333;
    border-radius: 3px;
  }
</style>

<main>
  <div class="boxed"  style="text-align: left;">
    <div style="display: inline-block;">
      <div>
        <input onclick="setStrokeStyle()" type="radio" id="canStroke" checked>
        <label for="canStroke">Stroke</label>
        <input onchange="setStrokeStyle()" type="color" id="strokeColor" value="#1155ff">
        <br>
        <label for="canFill"> LineWidth</label>
        <input onchange="setStrokeStyle()" id="canLineWidth" type="number" min="1" max="20" value="4" class="boxed">
      </div>
      <div>
        <input onclick="setFillStyle()" type="radio" id="canFill">
        <label for="canFill">Fill</label>
        <input onchange="setFillStyle()" type="color" id="fillColor" value="#11aa44">
      </div>
    </div>
    <div style="display: inline-block;">
      <a onclick="linearGradient()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default warning">
        <span class="v-btn__content">Use Linear Gradient</span>
      </a><br><br><br>
      <a onclick="radialGradient()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default warning">
        <span class="v-btn__content">Use Radial Gradient</span>
      </a>
    </div>
  </div><br>
  <div class="boxed">
    <a href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default danger"
      onclick="pen.clearRect(0, 0, 500, 500)">
      <span class="v-btn__content">Clear</span>
    </a>
    <a onclick="line()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default success">
      <span class="v-btn__content">Line</span>
    </a>
    <a onclick="rectangle()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default success">
      <span class="v-btn__content">Rectangle</span>
    </a>
    <a onclick="arc()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default success">
      <span class="v-btn__content">Arc</span>
    </a>
    <a onclick="bezier()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default success">
      <span class="v-btn__content">Bezier Curve</span>
    </a>
    <a onclick="path()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default success">
      <span class="v-btn__content">Compound Path</span>
    </a>
    <a onclick="saveRestore()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default success">
      <span class="v-btn__content">Save/Restore State</span>
    </a>
    <hr>
    <a onclick="renderText()" href="#" class="ma-1 v-btn v-btn--contained theme--dark v-size--default success">
      <span class="v-btn__content">Text</span>
    </a>
    <input class="boxed" id="canWords" value="Hello world!"/>
  </div><br>
  <canvas id="demoCanvas" class="boxed" width="500" height="500"></canvas>
</main>
<script>
  // Global variables
  var can
  var pen
  var strokeMode = true

  // When the page is finished loading, save as jQuery's $(document).ready()
  document.addEventListener("DOMContentLoaded", () => {
    can = document.getElementById("demoCanvas")
    pen = can.getContext('2d')

    // Read initial styles off inputs
    setFillStyle()
    setStrokeStyle()  
  })

  function setStrokeStyle() {
    strokeMode = true
    pen.lineWidth = document.getElementById('canLineWidth').value
    pen.strokeStyle = document.getElementById('strokeColor').value
  }
  function setFillStyle() {
    strokeMode = false
    pen.lineWidth = event.target.value
    pen.fillStyle = document.getElementById('fillColor').value
  }

  function linearGradient() {
    // Gradient create an imaginary line and transitions between 
    // colors along the line for filling or stroking
    var grad = pen.createLinearGradient(200, 200, 350, 350)
    grad.addColorStop(0, "red")  //The start of the imaginary line is 0
    grad.addColorStop(0.3, "yellow")
    grad.addColorStop(0.6, "pink")
    grad.addColorStop(1, "blue") //The end of the imaginary line is 1
    pen.strokeStyle = grad
    pen.fillStyle = grad
  }

  function radialGradient() {
    // Gradient create an imaginary line and transitions between 
    // colors along the line for filling or stroking
    var grad = pen.createRadialGradient(200, 200, 100, 250, 250, 200)
    grad.addColorStop(0, "red")  //The start of the imaginary line is 0
    grad.addColorStop(0.3, "yellow")
    grad.addColorStop(0.6, "pink")
    grad.addColorStop(1, "blue") //The end of the imaginary line is 1
    pen.strokeStyle = grad
    pen.fillStyle = grad
  }

  function line() {
    pen.beginPath()
    pen.moveTo(100, 150)
    pen.lineTo(400, 350)
    if (strokeMode) {
      pen.stroke()
    } else {
      pen.fill()
    }
  }

  function rectangle() {
    if (strokeMode) {
      pen.strokeRect(50, 50, 400, 400)
    } else {
      pen.fillRect(50, 50, 400, 400)
    }
  }

  function arc() {
    // Arcs are path, they can be stroked or filled
    // Angles use radians so 360 degrees => 6.2831852 radians
    // 6.2831852 = 2 x PI
    // So half a circle is Math.PI radians, and below is 3/4 of a circle
    // Arcs can also revolve in the opposite direction, see path()
    pen.beginPath()
    pen.arc(250, 250, 200, 0, Math.PI * 1.5) // x, y, radius, startAngle, endAngle
    if (strokeMode) {
      pen.stroke()
    } else {
      pen.fill()
    }
  }

  function bezier() {
    pen.beginPath()
    pen.moveTo(50, 250)
    pen.bezierCurveTo(433, 48, 273, 432, 400, 250)
    if (strokeMode) {
      pen.stroke()
    } else {
      pen.fill()
    }
  }

  function path() {
    pen.beginPath()
    pen.arc(150, 200, 100, Math.PI, 2 * Math.PI)
    pen.lineTo(250, 300)
    pen.arc(350, 300, 100, Math.PI, 0, true) // true reverses direction of revolution
    pen.bezierCurveTo(450, 225, 154, 202, 419, 62)
    if (strokeMode) {
      pen.stroke()
    } else {
      pen.fill()
    }
  }

  function renderText() {
    var words = document.getElementById("canWords").value
    pen.beginPath()
    pen.font = "65px sans-serif"
    if (strokeMode) {
      pen.strokeText(words, 100, 300)
    } else {
      pen.fillText(words, 100, 300)
    }
  }

  function saveRestore(){
    // save() and restore() are used to take the current state 
    // and push to or pop from an internal stack.

    //Before saving, the globalAlpha = 1
    pen.save()
      pen.globalAlpha = 0.25
      pen.translate(50,-50)
      
      rectangle()

      pen.save()
        pen.rotate(Math.PI/4)

        rectangle()

      pen.restore()

    pen.restore()
    //Now the globalAlpha has been restored to 1
    
    rectangle()
  }

</script>